/* @unit-ready */
import { workspace } from 'vscode';
import { TemplateLoader } from './template-loader';
import {
  createFile,
  deleteFile,
  getUriInWorkspace,
} from '../test/test-utils-vscode';
import { randomString } from '../test/test-utils';

describe('TemplateLoader', () => {
  let templateLoader: TemplateLoader;
  let mockIsTrusted: jest.SpyInstance;

  beforeEach(() => {
    templateLoader = new TemplateLoader();
    // Mock the workspace.isTrusted property
    mockIsTrusted = jest.spyOn(workspace, 'isTrusted', 'get');
  });

  afterEach(() => {
    mockIsTrusted.mockRestore();
  });

  describe('workspace trust', () => {
    it('should throw error when loading JS template in untrusted workspace', async () => {
      // Mock workspace as untrusted
      mockIsTrusted.mockReturnValue(false);

      const jsTemplateUri = getUriInWorkspace(
        `test-template-${randomString()}.js`
      );
      const { uri } = await createFile(
        'function createNote() { return { filepath: "test.md", content: "test" }; }',
        [`test-template-${randomString()}.js`]
      );

      try {
        await expect(
          templateLoader.loadTemplate(uri.toFsPath())
        ).rejects.toThrow(
          'JavaScript templates can only be used in trusted workspaces for security reasons'
        );
      } finally {
        await deleteFile(uri);
      }
    });

    it('should load JS template successfully in trusted workspace', async () => {
      // Mock workspace as trusted
      mockIsTrusted.mockReturnValue(true);

      const jsTemplateContent = `
        function createNote(context) {
          return {
            filepath: 'test-note.md',
            content: '# Test Note\\n\\nGenerated by JS template'
          };
        }
      `;
      const { uri } = await createFile(jsTemplateContent, [
        `test-template-${randomString()}.js`,
      ]);

      try {
        const template = await templateLoader.loadTemplate(uri.toFsPath());
        expect(template.type).toBe('javascript');
        if (template.type === 'javascript') {
          expect(template.createNote).toBeDefined();
          expect(typeof template.createNote).toBe('function');
        }
      } finally {
        await deleteFile(uri);
      }
    });

    it('should load markdown template regardless of workspace trust', async () => {
      // Mock workspace as untrusted
      mockIsTrusted.mockReturnValue(false);

      const mdTemplateContent = `---
name: Test Template
---
# Test Note

This is a markdown template.`;
      const { uri } = await createFile(mdTemplateContent, [
        `test-template-${randomString()}.md`,
      ]);

      try {
        const template = await templateLoader.loadTemplate(uri.toFsPath());
        expect(template.type).toBe('markdown');
        if (template.type === 'markdown') {
          expect(template.content).toBe(mdTemplateContent);
        }
      } finally {
        await deleteFile(uri);
      }
    });
  });
});
