import {
  window,
  workspace,
  Uri,
  ExtensionContext,
  commands,
  Position,
} from "vscode";
import fs = require("fs");
import { FoamFeature } from "../types";
import {
  generateLinkReferences,
  generateHeading,
  Foam,
  Note,
  TextEdit,
  applyTextEdit
} from 'foam-core';



// NOTE TO SELF 


// const REFERENCE_HEADER = `[//begin]: # "Autogenerated link references for markdown compatibility"`;
// const REFERENCE_FOOTER = `[//end]: # "Autogenerated link references"`;

const feature: FoamFeature = {
  activate: async (context: ExtensionContext, foamPromise: Promise<Foam>) => {
    const foam = await foamPromise;
    context.subscriptions.push(
      commands.registerCommand("foam-vscode.janitor", () => janitor(foam))
    );
  },
};

async function janitor(foam: Foam) {
  const notes = foam.notes.getNotes();

  const dirtyEditors = window.visibleTextEditors.filter(editor => editor.document.isDirty);
  const dirtyEditorsFileName = dirtyEditors.map(editor => editor.document.fileName);

  const dirtyNotes: Note[] = [];
  const nonDirtyNotes: Note[] = [];

  notes.forEach(note => {
    if (dirtyEditorsFileName.includes(note.path)) {
      dirtyNotes.push(note);
    } else {
      nonDirtyNotes.push(note);
    }
  });


  // Apply Text Edits to Non Dirty Notes using fs module just like CLI

  // const fileWritePromises = dirtyNotes.map(note => {
  //   // get edits
  //   const heading = generateHeading(note);
  //   let definitions = generateLinkReferences(note, foam.notes);

  //   // apply Edits
  //   let text = note.source;
  //   text = heading ? applyTextEdit(text, heading) : text;
  //   text = definitions ? applyTextEdit(text, definitions) : text;

  //   return fs.promises.writeFile(note.path, text);
  // });

  // await Promise.all(fileWritePromises);


  // Handle dirty editors 


  // dirtyEditors.map(async editor => {
  //   let text = editor.document.getText(); // This includes unsaved changes as well

  //   const note = dirtyNotes.find(n => n.path === editor.document.fileName);
  //   note.source = text; // There may be a better of doing this..


  //   // Get edits
  //   const heading = generateHeading(note);
  //   let definitions = generateLinkReferences(note, foam.notes);

  //   // apply Edits
  //   text = heading ? applyTextEdit(text, heading) : text;
  //   text = definitions ? applyTextEdit(text, definitions) : text;

  //   // Use editor.edit API to apply the text edit
  // });
}


export default feature;
